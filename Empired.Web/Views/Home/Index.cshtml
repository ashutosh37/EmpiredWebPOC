@using Empired.Web.ViewModels
@{
    Layout = "~/Views/Shared/_MasterLayout.cshtml";
}

@section Content{

    <h1>Welcome to student portal @ViewBag.UserName</h1>

    <div class="modal-dialog">
        <div class="modal-content">
            <form asp-controller="Home" asp-action="UploadSmallFile" enctype="multipart/form-data" id="BlobUploadForm" method="post" class="form-label-left" role="form">
                <div class="modal-body">
                    <div class="form-group">
                        <div class="input-group">
                            <label class="input-group-btn">
                                <span class="btn btn-primary">
                                    Browse… <input type="file" style="display: none;" name="file" id="FileInput">
                                </span>
                            </label>
                            <input type="text" class="form-control" readonly="" id="BrowseInput">
                        </div>
                    </div>
                    <div class="form-group">
                        <div class="input-group">
                            <button type="button" value="Upload to Blob" class="btn btn-default" id="UploadBlob" onclick="uploadBlob()">Upload to Blob</button>
                        </div>
                    </div>
                    <div class="form-group hidden" id="uploadProgressBarContainer">
                        Uploading...
                        <div class="progress">
                            <div class="progress-bar" role="progressbar" id="uploadProgressBar" aria-valuenow="60" aria-valuemin="0" aria-valuemax="100" style="width: 0%;">
                                0%
                            </div>
                        </div>
                    </div>
                </div>
                <div id="row col-md-12">
                    <ul id="displaybloblist">

                    </ul>
                </div>
            </form>
        </div>
    </div>
    }
    @section Scripts {
        <script type="text/javascript">
        $(document).on('change', ':file', function () {
            var input = $(this)
            var label = $('#BrowseInput').val(input.val().replace(/\\/g, '/').replace(/.*\//, ''));
        });
        </script>
        <script type="text/javascript">
        function displayProcess(process) {
            document.getElementById("uploadProgressBar").style.width = process + '%';
            document.getElementById("uploadProgressBar").innerHTML = process + '%';
        }

            function uploadBlob() {


                //Checkk the sas in session storage 
                //if not exists get it from the webapi 
                

            // Show progress bar
            displayProcess(0);
            document.getElementById("uploadProgressBarContainer").classList.remove('hidden');
            var storageAccount = 'empiredtstblob'; 
            var blobUri = 'https://' + storageAccount + '.blob.core.windows.net';
            var containerName = 'container-empiredblob';
            var sasToken = 'sv=2018-03-28&ss=b&srt=sco&sp=rwdlac&se=2019-01-11T07:09:42Z&st=2019-01-10T23:09:42Z&spr=https&sig=HAvG99Qfxy%2BdDafLktk9LlzeN6i%2FIebB%2FSTfeQ0uA5E%3D';
            var blobService = AzureStorage.Blob.createBlobServiceWithSas(blobUri, sasToken);
            
            // If one file has been selected in the HTML file input element
            var file = $('#FileInput').get(0).files[0];
            console.log(file);
            var customBlockSize = file.size > 1024 * 1024 * 32 ? 1024 * 1024 * 4 : 1024 * 512;
            blobService.singleBlobPutThresholdInBytes = customBlockSize;

            var finishedOrError = false;
            var speedSummary = blobService.createBlockBlobFromBrowserFile(containerName, file.name, file, { blockSize: customBlockSize }, function (error, result, response) {
                finishedOrError = true;
                if (error) {
                    alert('Error');
                } else {
                    displayProcess(100);
                    blobService.listBlobsSegmented(containerName, null, (error, results) => {
                        if (error) {
                            // Handle list blobs error
                        } else {
                            $("#displaybloblist").empty();
                            var list = $("#displaybloblist");
                            results.entries.forEach(blob => {

                                var link = blobService.getUrl(containerName, blob.name, sasToken);
                                list.append("<li><a href='" + link + "'>"+blob.name+"</a></li>");
                            });
                        }
                    });
                }
            });

            function refreshProgress() {
                setTimeout(function () {
                    if (!finishedOrError) {
                        var process = speedSummary.getCompletePercent();
                        displayProcess(process);
                        refreshProgress();
                    }
                }, 200);
            }

            refreshProgress();
        }

        </script>
    }


